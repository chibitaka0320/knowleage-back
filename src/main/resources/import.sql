-- カテゴリの追加
DELETE FROM question_categories;
DELETE FROM categories;
ALTER SEQUENCE categories_id_seq RESTART WITH 1;

INSERT INTO categories (id, name, code) VALUES
(1, 'WEB', 'WEB'),
(2, 'FR', 'FR'),
(3, 'CL', 'CL'),
(4, 'ML', 'ML'),
(5, 'IT', 'IT');

-- 質問データ
DELETE FROM questions;
ALTER SEQUENCE questions_id_seq RESTART WITH 1;

INSERT INTO questions (content, example_answer, detailed_content, created_at, updated_at) VALUES 
('RESTful APIのベストプラクティスについて説明してください。',
'RESTful APIのベストプラクティスには、適切なHTTPメソッドの使用、リソースベースのURL設計、適切なステータスコードの使用、バージョニング、ページネーション、エラーハンドリングなどがあります。',
'# RESTful APIベストプラクティス

## 1. URL設計
- リソース指向
- 階層構造
- 複数形の使用

## 2. HTTPメソッド
- GET: 読み取り
- POST: 作成
- PUT: 更新
- DELETE: 削除

## 3. レスポンス設計
- 適切なステータスコード
- 一貫した形式
- エラー情報の提供

## 4. セキュリティ
- 認証
- 認可
- レート制限',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 2. FR
('Reactのパフォーマンス最適化手法について説明してください。',
'Reactのパフォーマンス最適化には、メモ化（useMemo, useCallback）、コード分割、レンダリングの最適化、状態管理の適切な設計などが重要です。',
'# React最適化手法

## 1. メモ化
- useMemo
- useCallback
- React.memo

## 2. コード分割
- React.lazy
- Suspense
- 動的インポート

## 3. レンダリング最適化
- 不要な再レンダリング防止
- 仮想化リスト
- コンポーネント設計

## 4. 状態管理
- ローカル状態
- グローバル状態
- キャッシュ戦略',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 3. CL
('AWSのコスト最適化戦略について説明してください。',
'AWSのコスト最適化には、適切なインスタンスタイプの選択、リザーブドインスタンスの活用、自動スケーリング、使用していないリソースの削除などが重要です。',
'# AWSコスト最適化

## 1. インスタンス戦略
- 適切なサイジング
- リザーブドインスタンス
- スポットインスタンス

## 2. ストレージ最適化
- S3ライフサイクル
- EBSボリューム管理
- データ階層化

## 3. ネットワーク最適化
- データ転送コスト
- CDN活用
- リージョン選択

## 4. モニタリング
- Cost Explorer
- Budgets
- タグ付け戦略',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 4. ML
('機械学習モデルの評価指標について説明してください。',
'機械学習モデルの評価には、精度、再現率、F1スコア、AUC-ROCなどの指標があり、タスクの性質に応じて適切な指標を選択する必要があります。',
'# モデル評価指標

## 1. 分類タスク
- 精度（Accuracy）
- 適合率（Precision）
- 再現率（Recall）
- F1スコア

## 2. 回帰タスク
- MSE
- RMSE
- MAE
- R2スコア

## 3. ランキング
- NDCG
- MAP
- MRR

## 4. モデル比較
- クロスバリデーション
- ホールドアウト法
- 学習曲線',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 5. IT
('マイクロサービスアーキテクチャの利点と課題について説明してください。',
'マイクロサービスアーキテクチャは、スケーラビリティ、独立したデプロイ、技術スタックの柔軟性などの利点がある一方、複雑な運用、サービス間通信、データの一貫性などの課題があります。',
'# マイクロサービス

## 1. 利点
- スケーラビリティ
- 独立性
- 柔軟性
- 耐障害性

## 2. 課題
- 複雑な運用
- サービス間通信
- データ一貫性
- モニタリング

## 3. 設計原則
- 単一責任
- 疎結合
- 高凝集
- 自律性

## 4. 実装パターン
- APIゲートウェイ
- サーキットブレーカー
- サービスディスカバリ
- イベント駆動',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 6. WEB
('データベースのインデックス設計について説明してください。',
'データベースのインデックスは、クエリのパフォーマンスを向上させる重要な要素です。適切なカラムの選択、複合インデックスの設計、メンテナンス計画が重要です。',
'# インデックス設計

## 1. 基本原則
- 検索頻度
- カーディナリティ
- 更新頻度
- サイズ考慮

## 2. インデックス種類
- B-tree
- Hash
- Bitmap
- GiST

## 3. 設計戦略
- 複合インデックス
- カバリングインデックス
- 部分インデックス
- インクルードインデックス

## 4. メンテナンス
- 断片化対策
- 統計情報更新
- 不要インデックス削除
- パフォーマンス監視',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 7. FR
('TypeScriptの高度な型システムについて説明してください。',
'TypeScriptの型システムは、ジェネリクス、ユニオン型、インターセクション型、型ガード、条件付き型など、多くの高度な機能を提供します。',
'# TypeScript型システム

## 1. 高度な型
- ジェネリクス
- ユニオン型
- インターセクション型
- リテラル型

## 2. 型操作
- マップ型
- 条件付き型
- インデックス型
- ユーティリティ型

## 3. 型安全性
- 型ガード
- 型アサーション
- never型
- unknown型

## 4. ベストプラクティス
- 型推論活用
- 型定義分離
- 型テスト
- 型の再利用',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 8. CL
('コンテナオーケストレーションについて説明してください。',
'コンテナオーケストレーションは、Kubernetes、Docker Swarm、ECSなどのツールを使用して、コンテナのデプロイ、スケーリング、管理を自動化する技術です。',
'# コンテナオーケストレーション

## 1. 主要機能
- デプロイ管理
- スケーリング
- サービスディスカバリ
- ロードバランシング

## 2. アーキテクチャ
- コントロールプレーン
- ワーカーノード
- ネットワーク
- ストレージ

## 3. 運用管理
- モニタリング
- ログ収集
- セキュリティ
- バックアップ

## 4. ツール比較
- Kubernetes
- Docker Swarm
- ECS
- OpenShift',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 9. ML
('深層学習フレームワークの比較について説明してください。',
'TensorFlow、PyTorch、Kerasなどの主要な深層学習フレームワークには、それぞれ特徴や利点があり、用途に応じて選択します。',
'# フレームワーク比較

## 1. TensorFlow
- 静的グラフ
- 本番デプロイ
- TPUサポート
- TensorBoard

## 2. PyTorch
- 動的グラフ
- デバッグ容易
- 研究向き
- トレーサビリティ

## 3. Keras
- 高レベルAPI
- 簡単な実装
- マルチバックエンド
- 迅速なプロトタイプ

## 4. 選択基準
- 使用目的
- チーム経験
- パフォーマンス要件
- エコシステム',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 10. IT
('DevOpsプラクティスについて説明してください。',
'DevOpsは、開発（Dev）と運用（Ops）を統合し、継続的なデリバリー、自動化、モニタリングを実現する文化とプラクティスです。',
'# DevOpsプラクティス

## 1. 継続的統合/デリバリー
- 自動ビルド
- 自動テスト
- 自動デプロイ
- 品質ゲート

## 2. インフラストラクチャ
- Infrastructure as Code
- コンテナ化
- クラウドネイティブ
- 構成管理

## 3. モニタリング
- ログ集約
- メトリクス収集
- アラート設定
- パフォーマンス分析

## 4. 文化と協業
- 共有責任
- フィードバックループ
- 知識共有
- 継続的改善',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 11. WEB
('Webセキュリティの主要な脅威と対策について説明してください。',
'Webアプリケーションの主要な脅威には、XSS、CSRF、SQLインジェクション、認証バイパスなどがあり、適切なセキュリティ対策が必要です。',
'# Webセキュリティ

## 1. XSS対策
- 入力検証
- 出力エスケープ
- CSPの設定
- HttpOnly Cookie

## 2. CSRF対策
- トークン検証
- SameSite Cookie
- Referrer確認
- 重要な操作の確認

## 3. インジェクション対策
- プリペアドステートメント
- 入力サニタイズ
- ORM使用
- エスケープ処理

## 4. 認証・認可
- 強力なパスワード
- 多要素認証
- セッション管理
- アクセス制御',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 12. FR
('モダンなCSSアーキテクチャについて説明してください。',
'CSSアーキテクチャには、BEM、OOCSS、CSS Modules、CSS-in-JSなどがあり、保守性とスケーラビリティを考慮して選択します。',
'# CSSアーキテクチャ

## 1. 命名規則
- BEM
- OOCSS
- SMACSS
- ITCSS

## 2. モジュール化
- CSS Modules
- Styled Components
- Emotion
- Tailwind CSS

## 3. 設計原則
- 単一責任
- カプセル化
- 再利用性
- スケーラビリティ

## 4. ベストプラクティス
- 変数活用
- コンポーネント設計
- レスポンシブ対応
- パフォーマンス最適化',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 13. CL
('サーバーレスアーキテクチャについて説明してください。',
'サーバーレスアーキテクチャは、AWS Lambda、Azure Functions、Google Cloud Functionsなどを使用して、インフラ管理を抽象化し、イベント駆動型の処理を実現します。',
'# サーバーレス

## 1. 主要概念
- 関数実行
- イベント駆動
- 自動スケーリング
- 従量課金

## 2. ユースケース
- APIバックエンド
- データ処理
- IoTバックエンド
- 定期実行

## 3. アーキテクチャ
- 関数分割
- ステートレス設計
- イベントソーシング
- マイクロサービス

## 4. 考慮点
- コールドスタート
- 実行時間制限
- モニタリング
- コスト管理',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 14. ML
('機械学習モデルのデプロイメントについて説明してください。',
'機械学習モデルのデプロイメントには、モデルのパッケージング、APIの構築、スケーリング、モニタリングなど、多くの考慮点があります。',
'# MLデプロイメント

## 1. デプロイ戦略
- バッチ推論
- リアルタイム推論
- エッジデプロイ
- A/Bテスト

## 2. インフラストラクチャ
- コンテナ化
- サーバーレス
- GPUサポート
- 負荷分散

## 3. モニタリング
- 予測品質
- パフォーマンス
- リソース使用
- ドリフト検出

## 4. 運用管理
- バージョン管理
- ロールバック
- 再学習
- ログ分析',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 15. IT
('ソフトウェアテストの戦略と手法について説明してください。',
'ソフトウェアテストには、単体テスト、統合テスト、E2Eテストなど、様々なレベルと手法があり、品質保証のために体系的なアプローチが必要です。',
'# テスト戦略

## 1. テストレベル
- 単体テスト
- 統合テスト
- システムテスト
- 受入テスト

## 2. テスト手法
- ブラックボックス
- ホワイトボックス
- 探索的テスト
- 自動化テスト

## 3. テスト設計
- 同値分割
- 境界値分析
- デシジョンテーブル
- ペアワイズ

## 4. テスト管理
- テスト計画
- テスト実行
- 欠陥管理
- レポーティング',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 16. WEB
('キャッシュ戦略について説明してください。',
'Webアプリケーションのキャッシュ戦略には、ブラウザキャッシュ、CDN、アプリケーションキャッシュ、データベースキャッシュなど、複数のレイヤーがあります。',
'# キャッシュ戦略

## 1. ブラウザキャッシュ
- Cache-Control
- ETag
- Expires
- Last-Modified

## 2. CDN
- エッジロケーション
- キャッシュ無効化
- TTL設定
- 動的コンテンツ

## 3. アプリケーションキャッシュ
- Redis
- Memcached
- インメモリキャッシュ
- 分散キャッシュ

## 4. データベースキャッシュ
- クエリキャッシュ
- バッファプール
- 結果セット
- マテリアライズドビュー',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 17. FR
('Webアプリケーションのパフォーマンス最適化について説明してください。',
'Webアプリケーションのパフォーマンス最適化には、ネットワーク最適化、レンダリング最適化、リソース最適化、コード最適化など、多面的なアプローチが必要です。',
'# パフォーマンス最適化

## 1. ネットワーク
- HTTP/2
- リソース圧縮
- レイジーロード
- プリロード

## 2. レンダリング
- クリティカルパス
- Tree Shaking
- コード分割
- SSR/CSR

## 3. リソース
- 画像最適化
- フォント最適化
- アセット管理
- キャッシュ戦略

## 4. コード
- バンドル最適化
- 非同期処理
- メモリ管理
- 実行時最適化',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 18. CL
('クラウドセキュリティについて説明してください。',
'クラウドセキュリティには、アイデンティティ管理、ネットワークセキュリティ、データ保護、コンプライアンスなど、多層的な防御が必要です。',
'# クラウドセキュリティ

## 1. アイデンティティ
- IAM
- MFA
- SSO
- ロールベース

## 2. ネットワーク
- VPC
- セキュリティグループ
- WAF
- DDoS対策

## 3. データ保護
- 暗号化
- キー管理
- バックアップ
- DLP

## 4. コンプライアンス
- 監査
- ログ管理
- 証跡
- ポリシー管理',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 19. ML
('自然言語処理の基本技術について説明してください。',
'自然言語処理には、形態素解析、構文解析、意味解析、感情分析など、テキストを理解・処理するための様々な技術があります。',
'# 自然言語処理

## 1. 前処理
- トークン化
- 正規化
- ストップワード
- レンマ化

## 2. 特徴表現
- Bag of Words
- TF-IDF
- Word2Vec
- BERT

## 3. タスク
- テキスト分類
- 感情分析
- 機械翻訳
- 質問応答

## 4. 評価
- BLEU
- ROUGE
- 適合率/再現率
- F1スコア',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 20. IT
('アジャイル開発手法について説明してください。',
'アジャイル開発は、反復的な開発、継続的なフィードバック、柔軟な変更対応を特徴とする開発手法です。',
'# アジャイル開発

## 1. 基本原則
- 顧客満足
- 変更受入
- 頻繁なデリバリー
- 継続的改善

## 2. スクラム
- スプリント
- デイリースクラム
- バックログ
- レトロスペクティブ

## 3. プラクティス
- ペアプログラミング
- TDD
- CI/CD
- モブプログラミング

## 4. チーム管理
- 自己組織化
- クロスファンクショナル
- 透明性
- コミュニケーション',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 21. WEB
('NoSQLデータベースの特徴と使用場面について説明してください。',
'NoSQLデータベースは、スケーラビリティ、柔軟なスキーマ、高可用性を特徴とし、大規模データ、リアルタイム処理、非構造化データの処理に適しています。',
'# NoSQLデータベース

## 1. 種類
- ドキュメント指向
- キーバリュー
- カラム指向
- グラフ

## 2. 特徴
- スケーラビリティ
- 柔軟なスキーマ
- 高可用性
- 分散処理

## 3. ユースケース
- ビッグデータ
- リアルタイム処理
- IoTデータ
- ソーシャルグラフ

## 4. 考慮点
- 一貫性モデル
- パフォーマンス
- 運用管理
- コスト',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 22. FR
('SPAのルーティングと状態管理について説明してください。',
'SPAのルーティングと状態管理は、ユーザー体験とアプリケーションの保守性に重要な要素です。適切な設計と実装が必要です。',
'# SPA設計

## 1. ルーティング
- クライアントサイド
- 履歴管理
- ディープリンク
- コード分割

## 2. 状態管理
- Redux
- MobX
- Recoil
- Zustand

## 3. データフロー
- 単方向データフロー
- イミュータブル
- 副作用管理
- キャッシュ

## 4. パフォーマンス
- メモ化
- 遅延読み込み
- プリフェッチ
- デバウンス',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 23. CL
('マイクロサービスの監視と運用について説明してください。',
'マイクロサービスの監視と運用には、分散トレーシング、ログ集約、メトリクス収集、アラート管理など、包括的なアプローチが必要です。',
'# マイクロサービス運用

## 1. 監視
- 分散トレーシング
- ログ集約
- メトリクス
- ヘルスチェック

## 2. 運用
- デプロイ戦略
- スケーリング
- フェイルオーバー
- バックアップ

## 3. 障害対応
- 根本原因分析
- 復旧手順
- 障害通知
- 事後分析

## 4. 最適化
- パフォーマンス
- リソース使用
- コスト
- セキュリティ',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 24. ML
('強化学習の基本概念と応用について説明してください。',
'強化学習は、エージェントが環境との相互作用を通じて最適な行動を学習する手法です。ゲーム、ロボット制御、推薦システムなどに応用されています。',
'# 強化学習

## 1. 基本要素
- 状態
- 行動
- 報酬
- 方策

## 2. アルゴリズム
- Q学習
- SARSA
- DQN
- A3C

## 3. 応用分野
- ゲームAI
- ロボット制御
- 資源最適化
- 推薦システム

## 4. 課題
- 探索と活用
- サンプル効率
- 安定性
- スケーラビリティ',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 25. IT
('システムアーキテクチャの設計原則について説明してください。',
'システムアーキテクチャの設計には、SOLID原則、DRY、KISS、YAGNI、関心の分離など、様々な設計原則があります。',
'# 設計原則

## 1. SOLID
- 単一責任
- オープンクローズド
- リスコフ置換
- インターフェース分離
- 依存性逆転

## 2. その他の原則
- DRY
- KISS
- YAGNI
- 関心の分離

## 3. アーキテクチャパターン
- レイヤード
- ヘキサゴナル
- クリーン
- CQRS

## 4. 評価基準
- 保守性
- スケーラビリティ
- テスト容易性
- セキュリティ',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 26. WEB
('GraphQLの特徴と利点について説明してください。',
'GraphQLは、クライアントが必要なデータを柔軟に指定できるクエリ言語です。オーバーフェッチやアンダーフェッチを防ぎ、効率的なデータ取得を実現します。',
'# GraphQL

## 1. 基本概念
- スキーマ
- クエリ
- ミューテーション
- サブスクリプション

## 2. 利点
- 柔軟なデータ取得
- 型安全性
- 単一エンドポイント
- 効率的な通信

## 3. 実装
- リゾルバ
- データローダー
- スキーマ設計
- エラーハンドリング

## 4. 考慮点
- キャッシュ戦略
- N+1問題
- バッチ処理
- セキュリティ',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 27. FR
('Webアクセシビリティについて説明してください。',
'Webアクセシビリティは、障害のある人々を含むすべてのユーザーがWebコンテンツにアクセスできるようにするための重要な考慮事項です。',
'# アクセシビリティ

## 1. 基本原則
- 知覚可能性
- 操作可能性
- 理解可能性
- 堅牢性

## 2. 実装
- セマンティックHTML
- ARIA属性
- キーボード操作
- フォーカス管理

## 3. テスト
- 自動化テスト
- スクリーンリーダー
- キーボードナビゲーション
- コントラストチェック

## 4. ガイドライン
- WCAG
- WAI-ARIA
- セクション508
- JIS X 8341-3',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 28. CL
('クラウドネイティブアプリケーションの設計原則について説明してください。',
'クラウドネイティブアプリケーションは、クラウドの特性を活かした設計原則に基づいて構築され、スケーラビリティ、弾力性、回復力を備えています。',
'# クラウドネイティブ

## 1. 設計原則
- 12要素アプリ
- マイクロサービス
- コンテナ化
- DevOps

## 2. アーキテクチャ
- 分散システム
- イベント駆動
- サーバーレス
- メッシュ

## 3. インフラ
- オートスケーリング
- 自己修復
- 構成管理
- 監視

## 4. セキュリティ
- ゼロトラスト
- 暗号化
- アイデンティティ
- コンプライアンス',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 29. ML
('コンピュータビジョンの基本技術について説明してください。',
'コンピュータビジョンは、画像や動画からの情報抽出、認識、理解を行う技術分野です。深層学習の発展により大きな進歩を遂げています。',
'# コンピュータビジョン

## 1. 基本処理
- 画像前処理
- 特徴抽出
- セグメンテーション
- 物体検出

## 2. アルゴリズム
- CNN
- YOLO
- R-CNN
- U-Net

## 3. 応用
- 顔認識
- 姿勢推定
- 画像生成
- 動画解析

## 4. 課題
- ロバスト性
- 計算コスト
- データ収集
- プライバシー',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),

-- 30. IT
('継続的インテグレーション/デリバリー（CI/CD）について説明してください。',
'CI/CDは、コードの統合、テスト、デプロイを自動化し、ソフトウェアデリバリーの品質と速度を向上させる実践です。',
'# CI/CD

## 1. 継続的インテグレーション
- 自動ビルド
- 自動テスト
- コード解析
- 品質ゲート

## 2. 継続的デリバリー
- 環境管理
- デプロイ自動化
- ロールバック
- モニタリング

## 3. パイプライン
- ソース管理
- ビルド
- テスト
- デプロイ

## 4. ベストプラクティス
- 小さな変更
- 頻繁な統合
- 自動化重視
- フィードバック',
CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);


-- 質問とカテゴリの関連付け
INSERT INTO question_categories (question_id, category_id) VALUES
(1, 1),  -- RESTful API -> WEB
(2, 2),  -- Reactパフォーマンス -> FR
(3, 3),  -- AWSコスト最適化 -> CL
(4, 4),  -- 機械学習評価指標 -> ML
(5, 5),  -- マイクロサービス -> IT
(6, 1),  -- データベースインデックス -> WEB
(7, 2),  -- TypeScript -> FR
(8, 3),  -- コンテナオーケストレーション -> CL
(9, 4),  -- 深層学習フレームワーク -> ML
(10, 5), -- DevOps -> IT
(11, 1), -- Webセキュリティ -> WEB
(12, 2), -- CSSアーキテクチャ -> FR
(13, 3), -- サーバーレス -> CL
(14, 4), -- MLデプロイメント -> ML
(15, 5), -- ソフトウェアテスト -> IT
(16, 1), -- キャッシュ戦略 -> WEB
(17, 2), -- Webパフォーマンス -> FR
(18, 3), -- クラウドセキュリティ -> CL
(19, 4), -- 自然言語処理 -> ML
(20, 5), -- アジャイル開発 -> IT
(21, 1), -- NoSQL -> WEB
(22, 2), -- SPA -> FR
(23, 3), -- マイクロサービス運用 -> CL
(24, 4), -- 強化学習 -> ML
(25, 5), -- システム設計 -> IT
(26, 1), -- GraphQL -> WEB
(27, 2), -- アクセシビリティ -> FR
(28, 3), -- クラウドネイティブ -> CL
(29, 4), -- コンピュータビジョン -> ML
(30, 5); -- CI/CD -> IT